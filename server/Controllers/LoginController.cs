using System.Text;
using Microsoft.AspNetCore.Mvc;
using server.DAL;
using server.Models;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;
using Microsoft.AspNetCore.Cors;
using System.Net;
using System.Net.Mail;
using System.Net.Http;
using Microsoft.AspNetCore.Http;


namespace server.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [EnableCors("AllowViteApp")]
    public class LoginController : Controller
    {

        private readonly ILoginRepository _loginRepository;
        private readonly IConfigurationRoot _configuration;

        public LoginController(ILoginRepository loginRepository)
        {
            _loginRepository = loginRepository;
            _configuration = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("env.config.json")
            .Build();
        }

        [HttpPost]
        public async Task<IActionResult> Login(User user)
        {
          
            var usr = await _loginRepository.FetchOrCreateUser(user.Email);

            if (usr?.Email == null)
            {
                return BadRequest("There was an error fetching user " + user.Email);
            }

            string username = _configuration["EmailSettings:Username"] ?? throw new Exception("gmail username not configured in env.config.json");
            string password = _configuration["EmailSettings:Password"] ?? throw new Exception("gmail password not configured in env.config.json");


            return SendEmail(username, password, usr);
        }

        private string GenerateJwtToken(string userId)
        {
            var envKey = _configuration["SecretToken"] ?? throw new Exception("secret token not configured in env.config.json");

            var secretKey = Encoding.UTF8.GetBytes(envKey);
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, userId.ToString()) }),
                Expires = DateTime.UtcNow.AddHours(1),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(secretKey), SecurityAlgorithms.HmacSha256Signature)
            };

            return jwtTokenHandler.WriteToken(jwtTokenHandler.CreateToken(tokenDescriptor));
        }

        private IActionResult SendEmail(string username, string password, User user)
        {

            if (HttpContext?.Request?.Headers == null)
            {
                throw new ArgumentNullException(nameof(HttpContext.Request.Headers));
            }

            if (username == null || password == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            string clientUrl = HttpContext.Request.Headers["Referer"].ToString();
            var token = GenerateJwtToken(user.Id);

            SmtpClient smtpClient = new("smtp.gmail.com")
            {
                Port = 587,
                Credentials = new NetworkCredential(username, password),
                EnableSsl = true,
            };

            var mailMessage = new MailMessage
            {
                From = new MailAddress(username),
                Subject = "Verify your email",
                IsBodyHtml = true,
                // DISCLAIMER: HTML body generated by chatgpt
                Body = $@"<html lang=""en"">
                          <head>
                              <meta charset=""UTF-8"">
                              <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
                              <title>Email Verification</title>
                          </head>
                          <body style=""font-family: Arial, sans-serif; text-align: center;"">
                              <table style=""width: 100%; max-width: 600px; margin: 0 auto; background-color: #f7f7f7; padding: 20px;"">
                                  <tr>
                                      <td>
                                          <h2 style=""color: #333;"">Verify Your Email Address</h2>
                                          <p style=""font-size: 16px; color: #666;"">Thank you for signing up to discussions. To complete your registration, please click the button below to verify your email address:</p>
                                          <p>
                                              <a href=""{clientUrl}?token={token}&email={user.Email}"" style=""display: inline-block; padding: 12px 24px; background-color: #007BFF; color: #fff; text-decoration: none; font-weight: bold; border-radius: 5px;"">Verify Email</a>
                                          </p>
                                          <p style=""font-size: 14px; color: #888;"">If you did not create an account, you can safely ignore this email.</p>
                                      </td>
                                  </tr>
                              </table>
                          </body>
                          </html>"
            };

            mailMessage.To.Add(user.Email);

            try
            {
                smtpClient.Send(mailMessage);
                return Ok("Verification email sent to " + user.Email);
            }
            catch (Exception ex)
            {
                throw new Exception("There was an error sending the verification email: " + ex.Message);
            }
        }
    }
}